import os
from tkinter import *
from tkinter import ttk

def run_protocol(receptor, ligand, name, center_x, center_y, center_z, size_x, size_y, size_z, energy_range, exhaustiveness, directory_path):
    # Create the full path for the config file
    config_file_path = os.path.join(directory_path, "config.txt")
    command_code_file_path = os.path.join(directory_path, "command_code.txt")
    
    out = f"OUTPUT_{name}.pdbqt"
    log = f"LOG_{name}.txt"
    
    # Generate config content with user input
    config_content = f"""receptor = "{receptor}"
ligand = "{ligand}"

out = "{out}"
log = "{log}"

center_x = {center_x}
center_y = {center_y}
center_z = {center_z}

size_x = {size_x}
size_y = {size_y}
size_z = {size_z}

energy_range = {energy_range}
exhaustiveness = {exhaustiveness}
"""
    
    # Generate command code content
    command_code_content = f'"C:\\Program Files (x86)\\The Scripps Research Institute\\Vina\\vina.exe" --receptor "{receptor}" --ligand "{ligand}" --config config.txt --log "{log}" --out "{out}"'

    # Write the command code content to the specified command code file path
    with open(command_code_file_path, "w") as command_code_file:
        command_code_file.write(command_code_content)

    # Write the config content to the specified config file path
    with open(config_file_path, "w") as config_file:
       config_file.write(config_content)

    print(f"Config file and command code file generated successfully at: {config_file_path} and {command_code_file_path}")

def on_button_click():
    root = Tk()
    root.title("Super Slay Docking Machine")

    Label(root, text="Enter the directory where you want to save the files:").grid(row=0, column=0)
    directory_entry = Entry(root)
    directory_entry.grid(row=0, column=1)

    def get_files():
        directory_path = directory_entry.get()
        files = [file for file in os.listdir(directory_path) if file.endswith('.pdbqt')]
        
        receptor_label = ttk.Label(root, text="Select the receptor file:")
        receptor_label.grid(row=1, column=0, padx=10, pady=5, sticky=W)

        receptor_var = StringVar(root)
        receptor_var.set(files[0])  # Set default value to the first file
        receptor_menu = OptionMenu(root, receptor_var, *files)
        receptor_menu.grid(row=1, column=1, padx=10, pady=5, sticky=(W, E))

        ligand_label = ttk.Label(root, text="Select the ligand file:")
        ligand_label.grid(row=2, column=0, padx=10, pady=5, sticky=W)

        ligand_var = StringVar(root)
        ligand_var.set(files[0])  # Set default value to the first file
        ligand_menu = OptionMenu(root, ligand_var, *files)
        ligand_menu.grid(row=2, column=1, padx=10, pady=5, sticky=(W, E))

        Label(root, text="Enter the name for Output/Log:").grid(row=3, column=0)
        name_entry = Entry(root)
        name_entry.grid(row=3, column=1)

        center_x_default = StringVar(root, value="0")
        center_y_default = StringVar(root, value="0")
        center_z_default = StringVar(root, value="0")
        size_x_default = StringVar(root, value="100")
        size_y_default = StringVar(root, value="100")
        size_z_default = StringVar(root, value="100")
        energy_range_default = StringVar(root, value="4")
        exhaustiveness_default = StringVar(root, value="8")

        Label(root, text="Enter the value for 'center_x':").grid(row=4, column=0)
        center_x_entry = Entry(root, textvariable=center_x_default)
        center_x_entry.grid(row=4, column=1)

        Label(root, text="Enter the value for 'center_y':").grid(row=5, column=0)
        center_y_entry = Entry(root, textvariable=center_y_default)
        center_y_entry.grid(row=5, column=1)

        Label(root, text="Enter the value for 'center_z':").grid(row=6, column=0)
        center_z_entry = Entry(root, textvariable=center_z_default)
        center_z_entry.grid(row=6, column=1)

        Label(root, text="Enter the value for 'size_x':").grid(row=7, column=0)
        size_x_entry = Entry(root, textvariable=size_x_default)
        size_x_entry.grid(row=7, column=1)

        Label(root, text="Enter the value for 'size_y':").grid(row=8, column=0)
        size_y_entry = Entry(root, textvariable=size_y_default)
        size_y_entry.grid(row=8, column=1)

        Label(root, text="Enter the value for 'size_z':").grid(row=9, column=0)
        size_z_entry = Entry(root, textvariable=size_z_default)
        size_z_entry.grid(row=9, column=1)

        Label(root, text="Enter the value for 'energy_range':").grid(row=10, column=0)
        energy_range_entry = Entry(root, textvariable=energy_range_default)
        energy_range_entry.grid(row=10, column=1)

        Label(root, text="Enter the value for 'exhaustiveness':").grid(row=11, column=0)
        exhaustiveness_entry = Entry(root, textvariable=exhaustiveness_default)
        exhaustiveness_entry.grid(row=11, column=1)

        def generate_files():
            receptor = receptor_var.get()
            ligand = ligand_var.get()
            name = name_entry.get()
            center_x = float(center_x_entry.get())
            center_y = float(center_y_entry.get())
            center_z = float(center_z_entry.get())
            size_x = int(size_x_entry.get())
            size_y = int(size_y_entry.get())
            size_z = int(size_z_entry.get())
            energy_range = int(energy_range_entry.get())
            exhaustiveness = int(exhaustiveness_entry.get())

            directory = directory_entry.get()

            run_protocol(receptor, ligand, name, center_x, center_y, center_z, size_x, size_y, size_z, energy_range, exhaustiveness, directory)

        Button(root, text="Generate Files", command=generate_files).grid(row=13, column=0, columnspan=2)

    Button(root, text="Select Directory", command=get_files).grid(row=0, column=2)

    root.mainloop()

# Entry point for the script
on_button_click()
